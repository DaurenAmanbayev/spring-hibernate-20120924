package com.marakana.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Contact;

public class ContactRepository {
	private final DataSource ds;

	public ContactRepository() {
		try {
			Context context = new InitialContext();
			try {
				ds = (DataSource) context
						.lookup("java:comp/env/jdbc/trainingdb");
			} finally {
				context.close();
			}
		} catch (NamingException e) {
			throw new RuntimeException(e);
		}
	}

	public void init() throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "create table contact (id integer generated by default as identity primary key, name varchar(255), address_id integer, foreign key (address_id) references address)";
				statement.execute(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public List<Contact> findAll() throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "select * from contact";
				ResultSet results = statement.executeQuery(sql);
				try {
					List<Contact> materialized = new ArrayList<Contact>();
					while (results.next()) {
						materialized.add(unmarshal(results));
					}
					return materialized;
				} finally {
					results.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public Contact find(long id) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "select * from contact where id = " + id;
				ResultSet results = statement.executeQuery(sql);
				try {
					if (!results.next()) {
						return null;
					} else {
						return unmarshal(results);
					}
				} finally {
					results.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void save(Contact contact) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql;
				if (contact.getId() == null) {
					sql = "insert into contact (name, address_id) values ('"
							+ contact.getName() + "', '"
							+ contact.getAddressId() + "')";
				} else {
					sql = "update contact set name='" + contact.getName()
							+ "', address_id='" + contact.getAddressId()
							+ "' where id=" + contact.getId();
				}
				statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
				ResultSet keys = statement.getGeneratedKeys();
				if (keys.next()) {
					contact.setId(keys.getLong(1));
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void delete(Contact contact) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "delete from contact where id=" + contact.getId();
				statement.execute(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	private Contact unmarshal(ResultSet results) throws SQLException {
		return new Contact(results.getLong(1), results.getString(2),
				results.getLong(3));
	}
}
